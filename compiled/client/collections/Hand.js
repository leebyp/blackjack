// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Hand = (function(_super) {
    __extends(Hand, _super);

    function Hand() {
      return Hand.__super__.constructor.apply(this, arguments);
    }

    Hand.prototype.model = Card;

    Hand.prototype.initialize = function(array, deck, isDealer) {
      this.deck = deck;
      this.isDealer = isDealer;
    };

    Hand.prototype.hit = function() {
      this.add(this.deck.pop()).last();
      if (this.isDealer != null) {
        return this.checkDealer();
      } else {
        return this.checkPlayer();
      }
    };

    Hand.prototype.stand = function() {
      return this.trigger('stood', this);
    };

    Hand.prototype.scores = function() {
      var hasAce, score;
      hasAce = this.reduce(function(memo, card) {
        return memo || (card.get('value') === 1 && card.get('revealed'));
      }, false);
      score = this.reduce(function(score, card) {
        return score + (card.get('revealed') ? card.get('value') : 0);
      }, 0);
      console.log(hasAce, this, score);
      if (hasAce) {
        return [score, score + 10];
      } else {
        return [score];
      }
    };

    Hand.prototype.printScores = function() {
      var score1, score2, scoresarray;
      scoresarray = this.scores();
      score1 = scoresarray[0];
      score2 = scoresarray[1];
      if (score2 != null) {
        return "" + score1 + " or " + score2;
      } else {
        return "" + score1;
      }
    };

    Hand.prototype.checkPlayer = function() {
      if (this.scores()[0] > 21) {
        return this.trigger('playerLoses', this);
      }
    };

    Hand.prototype.checkDealer = function() {
      var dealerScore, length, score, _i, _len;
      dealerScore = this.scores();
      length = dealerScore.length;
      if (dealerScore[0] > 21) {
        this.trigger('playerWins', this);
        return;
      }
      if (dealerScore[length - 1] < 17) {
        this.hit();
        return;
      }
      for (_i = 0, _len = dealerScore.length; _i < _len; _i++) {
        score = dealerScore[_i];
        if ((17 <= score && score <= 21)) {
          this.trigger('checkGameOutcome', this);
          return;
        }
      }
    };

    return Hand;

  })(Backbone.Collection);

}).call(this);

//# sourceMappingURL=Hand.map
